name: Build

on:
  push:
    branches:
      - staging
      - master
      # @TODO: remove
      - chore/mobile

jobs:
  # @TODO: uncomment this
  # build-cipher-wasm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     # install rust
  #     - uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: 1.86.0
  #         target: wasm32-unknown-unknown
  #         # key based on branch name
  #         cache-shared-key: cipher-wasm-build-cache-${{ github.ref_name }}
  #         cache-workspaces: ./cipher -> target

  #     - name: Build Cipher Wasm
  #       # install wasm-pack, move to ./cipher and build with wasm-pack
  #       run: |
  #         cargo install wasm-pack
  #         cd ./cipher
  #         wasm-pack build --target web --release -d ../cipher-wasm

  #     # Instead of relying on cache, let's use artifacts to store the wasm files
  #     - name: Upload Cipher Wasm artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         # @TODO: change to [...]-${{github.ref_name}}
  #         name: cipher-wasm-staging
  #         path: cipher-wasm
  #         retention-days: 90
  #         overwrite: true

  build-web-app:
    runs-on: ubuntu-latest
    # @TODO: uncomment this
    # needs: build-cipher-wasm
    steps:
      - uses: actions/checkout@v4

      # by using github script, list artifacts for the repository and return the workflow run id for the artifact named cipher-wasm-${{ github.ref_name == 'main' && 'production' || 'staging' }}
      - name: Get Cipher Wasm artifact
        id: get-cipher-wasm-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              name: 'cipher-wasm-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
              sort: 'created',
              order: 'desc',
            });
            return artifacts.data.artifacts[0].workflow_run.id;

      - name: Restore Cipher Wasm artifact
        uses: actions/download-artifact@v4
        with:
          # @TODO: change to [...]-${{github.ref_name}}
          name: cipher-wasm-staging
          path: cipher-wasm
          github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
          run-id: ${{ steps.get-cipher-wasm-artifact.outputs.result }}

      # https://github.com/marketplace/actions/fetch-github-release-asset
      - name: Download Kaspa WASM Files
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: "kaspanet/rusty-kaspa"
          version: "tags/v1.0.0"
          file: "kaspa-wasm32-sdk-v1.0.0.zip"
          target: "kaspa-wasm32-sdk.zip"

      - name: Unzip Kaspa WASM Files & Move /web/kaspa to /wasm
        run: |
          unzip kaspa-wasm32-sdk.zip -d kaspa-wasm32-sdk && mv kaspa-wasm32-sdk/web/kaspa/* wasm/
          rm -rf kaspa-wasm32-sdk.zip kaspa-wasm32-sdk
          ls -la wasm/

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies & Build Kasia
        # pick staging or production based on the branch name - staging or main
        env:
          MODE: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
        run: npm install && npm run build:$MODE

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        env:
          MODE: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
        with:
          name: kasia-build-$MODE
          path: build/$MODE
# uses: dsaltares/fetch-gh-release-asset@master
# with:
#   repo: 'dsaltares/godot-wild-jam-18'
#   version: 'tags/v0.1.18'
#   file: 'plague-linux.zip'
#   token: ${{ secrets.GITHUB_TOKEN }}
