name: Build

on:
  push:
    branches:
      - staging
      - master
      # @TODO: remove
      - chore/mobile

jobs:
  # @TODO: uncomment this
  # build-cipher-wasm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     # install rust
  #     - uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: 1.86.0
  #         target: wasm32-unknown-unknown
  #         # key based on branch name
  #         cache-shared-key: cipher-wasm-build-cache-${{ github.ref_name }}
  #         cache-workspaces: ./cipher -> target

  #     - name: Build Cipher Wasm
  #       # install wasm-pack, move to ./cipher and build with wasm-pack
  #       run: |
  #         cargo install wasm-pack
  #         cd ./cipher
  #         wasm-pack build --target web --release -d ../cipher-wasm

  #     # Instead of relying on cache, let's use artifacts to store the wasm files
  #     - name: Upload Cipher Wasm artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cipher-wasm-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: cipher-wasm
  #         retention-days: 90
  #         overwrite: true

  # build-web-app:
  #   runs-on: ubuntu-latest
  #   needs: build-cipher-wasm
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Get Cipher Wasm artifact
  #       id: get-cipher-wasm-artifact
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const artifacts = await github.rest.actions.listArtifactsForRepo({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             per_page: 100,
  #             name: 'cipher-wasm-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
  #             sort: 'created',
  #             order: 'desc',
  #           });
  #           return artifacts.data.artifacts[0].workflow_run.id;

  #     - name: Restore Cipher Wasm artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: cipher-wasm-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: cipher-wasm
  #         github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
  #         run-id: ${{ steps.get-cipher-wasm-artifact.outputs.result }}

  #     # https://github.com/marketplace/actions/fetch-github-release-asset
  #     - name: Download Kaspa WASM Files
  #       uses: dsaltares/fetch-gh-release-asset@1.1.2
  #       with:
  #         repo: "kaspanet/rusty-kaspa"
  #         version: "tags/v1.0.0"
  #         file: "kaspa-wasm32-sdk-v1.0.0.zip"
  #         target: "kaspa-wasm32-sdk.zip"

  #     - name: Unzip Kaspa WASM Files & Move /web/kaspa to /wasm
  #       run: |
  #         unzip kaspa-wasm32-sdk.zip -d kaspa-wasm32-sdk && mv kaspa-wasm32-sdk/kaspa-wasm32-sdk/web/kaspa/* wasm/
  #         rm -rf kaspa-wasm32-sdk.zip kaspa-wasm32-sdk
  #         ls -la wasm/

  #     - name: Install Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: ".node-version"
  #         cache: "npm"
  #         cache-dependency-path: "package-lock.json"

  #     - name: Install dependencies & Build Kasia
  #       env:
  #         MODE: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #       run: npm install && npm run build:$MODE

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: dist

  # build-android-app:
  #   runs-on: ubuntu-latest
  #   # @TODO: uncomment this
  #   needs: build-web-app
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"

  #     - name: Cache NDK
  #       id: cache-ndk
  #       uses: actions/cache@v4
  #       with:
  #         # Path where NDK version 29.0.13599879 is expected to be installed by setup-android
  #         path: /usr/local/lib/android/sdk/ndk/29.0.13599879
  #         key: ndk-${{ runner.os }}-29.0.13599879

  #     - name: Setup Android SDK and NDK
  #       uses: android-actions/setup-android@v3
  #       with:
  #         cmdline-tools-version: 13114758 # v19

  #     - name: Install NDK
  #       run: sdkmanager "ndk;29.0.13599879"

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: 1.86.0
  #         targets: aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android

  #     - name: Cache Rust dependencies
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         workspaces: './src-tauri -> target'

  #     - name: setup Android signing
  #       run: |
  #         cd src-tauri/gen/android
  #         echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
  #         echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
  #         base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
  #         echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
  #         echo "Keystore properties created."
  #         cd app
  #         # create google-services.json from secret
  #         base64 -d <<< "${{ secrets.GOOGLE_SERVICE_BASE64 }}" > google-services.json
  #         echo "Google services created."

  #         cd ../../../.. # Go back to root

  #     # get web-app artifacts
  #     - name: Get Web App Artifact
  #       id: get-web-app-artifact
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const artifacts = await github.rest.actions.listArtifactsForRepo({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             per_page: 100,
  #             name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
  #             sort: 'created',
  #             order: 'desc',
  #           });
  #           return artifacts.data.artifacts[0].workflow_run.id;

  #     - name: Restore Web App artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: dist
  #         github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
  #         run-id: ${{ steps.get-web-app-artifact.outputs.result }}

  #     - name: Install Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: "npm"

  #     # install @tauri-apps/cli@latest
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli@latest

  #     - name: Build App
  #       run: tauri android build -v
  #       env:
  #         NDK_HOME: /usr/local/lib/android/sdk/ndk/29.0.13599879

  #     - name: Get Tauri App Version
  #       id: app-version
  #       run: |
  #         CARGO_TOML_PATH="src-tauri/Cargo.toml"
  #         echo "Attempting to read version from $CARGO_TOML_PATH"

  #         if [ ! -f "$CARGO_TOML_PATH" ]; then
  #           echo "Error: $CARGO_TOML_PATH not found."
  #           exit 1
  #         fi

  #         echo "--- Relevant content from $CARGO_TOML_PATH (looking for 'version = \"...' line) ---"
  #         grep '^version = "' "$CARGO_TOML_PATH" || echo "No line starting with 'version = \"' found in $CARGO_TOML_PATH."
  #         echo "--- End of relevant content ---"

  #         # Extract version string from Cargo.toml.
  #         # This looks for a line like 'version = "x.y.z"' in the [package] section.
  #         VERSION_STRING=$(grep '^version = "' "$CARGO_TOML_PATH" | head -n 1 | sed -e 's/version = "//' -e 's/"//')

  #         echo "Extracted version_string: '$VERSION_STRING'" # Debug output

  #         if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then # Check for empty or literal "null"
  #           echo "Error: Version not found or is invalid in $CARGO_TOML_PATH."
  #           echo "Please ensure $CARGO_TOML_PATH contains a line like 'version = \"x.y.z\"' (typically under the [package] section)."
  #           exit 1
  #         fi

  #         echo "Successfully extracted version: $VERSION_STRING"
  #         echo "version_string=$VERSION_STRING" >> "$GITHUB_OUTPUT"
  #       shell: bash

  #     - name: Rename APK file
  #       run: |
  #         mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/${{env.APP_NAME}}-${{ steps.app-version.outputs.version_string }}.apk

  #     - name: Upload APK Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kasia-android-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: ./src-tauri/gen/android/app/build/outputs/apk/universal/release/${{env.APP_NAME}}-${{ steps.app-version.outputs.version_string }}.apk

  # @TODO: REMOVE
  # build-desktop-apps:
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - platform: "macos-latest" # for Arm based macs (M1 and above).
  #           args: "--target aarch64-apple-darwin"
  #         - platform: "macos-latest" # for Intel based macs.
  #           args: "--target x86_64-apple-darwin"
  #         - platform: "ubuntu-22.04"
  #           args: ""
  #         - platform: "windows-latest"
  #           args: ""
  #   runs-on: ${{ matrix.platform }}
  #   # @TODO: uncomment this
  #   # needs: build-web-app
  #   #     runs-on: ${{ matrix.platform }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: install dependencies (ubuntu only)
  #       if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

  #     - name: setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: "npm"

  #     # get web-app artifacts
  #     - name: Get Web App Artifact
  #       id: get-web-app-artifact
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const artifacts = await github.rest.actions.listArtifactsForRepo({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             per_page: 100,
  #             name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
  #             sort: 'created',
  #             order: 'desc',
  #           });
  #           return artifacts.data.artifacts[0].workflow_run.id;

  #     - name: Restore Web App artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: dist
  #         github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
  #         run-id: ${{ steps.get-web-app-artifact.outputs.result }}

  #     - name: install Rust stable
  #       uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
  #       with:
  #         # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
  #         targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

  #     - name: Rust cache
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         workspaces: "./src-tauri -> target"

  #     # install @tauri-apps/cli@latest
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli@latest

  #     - uses: tauri-apps/tauri-action@v0
  #       id: build-tauri-app
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         # tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
  #         # releaseName: 'App v__VERSION__'
  #         # releaseBody: 'See the assets to download this version and install.'
  #         # releaseDraft: true
  #         # prerelease: false
  #         args: ${{ matrix.args }}

  #     # upload artifact
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kasia-${{ github.ref_name == 'main' && 'production' || 'staging' }}-${{ matrix.platform }}
  #         path: ${{ steps.build-tauri-app.outputs.artifactPaths[0] }}
  #         retention-days: 1

  build-macos-intel-app:
    runs-on: macos-13

    # @TODO: uncomment this
    # needs: build-web-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          cache: "npm"

      # get web-app artifacts
      - name: Get Web App Artifact
        id: get-web-app-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
              sort: 'created',
              order: 'desc',
            });
            return artifacts.data.artifacts[0].workflow_run.id;

      - name: Restore Web App artifact
        uses: actions/download-artifact@v4
        with:
          name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
          path: dist
          github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
          run-id: ${{ steps.get-web-app-artifact.outputs.result }}

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # install @tauri-apps/cli@latest
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build App
        run: tauri build -v

      # upload artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kasia-${{ github.ref_name == 'main' && 'production' || 'staging' }}-intel-macos
          path: ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/kasia.app.tar.gz
          retention-days: 1

  build-macos-arm-app:
    runs-on: macos-15

    # @TODO: uncomment this
    # needs: build-web-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          cache: "npm"

      # get web-app artifacts
      - name: Get Web App Artifact
        id: get-web-app-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
              sort: 'created',
              order: 'desc',
            });
            return artifacts.data.artifacts[0].workflow_run.id;

      - name: Restore Web App artifact
        uses: actions/download-artifact@v4
        with:
          name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
          path: dist
          github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
          run-id: ${{ steps.get-web-app-artifact.outputs.result }}

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # install @tauri-apps/cli@latest
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build App
        run: tauri build -v

      # upload artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kasia-${{ github.ref_name == 'main' && 'production' || 'staging' }}-arm-macos
          path: ./src-tauri/target/release/bundle/macos/kasia.app
          retention-days: 1

  build-linux-app:
    runs-on: ubuntu-22.04
    # @TODO: uncomment this
    # needs: build-web-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          cache: "npm"

      # get web-app artifacts
      - name: Get Web App Artifact
        id: get-web-app-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
              sort: 'created',
              order: 'desc',
            });
            return artifacts.data.artifacts[0].workflow_run.id;

      - name: Restore Web App artifact
        uses: actions/download-artifact@v4
        with:
          name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
          path: dist
          github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
          run-id: ${{ steps.get-web-app-artifact.outputs.result }}

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # install @tauri-apps/cli@latest
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build App
        run: tauri build -v

      - name: Group Build Artifacts
        run: |
          mkdir -p ./tmp
          mv ./src-tauri/target/release/bundle ./tmp/

      # upload artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kasia-${{ github.ref_name == 'main' && 'production' || 'staging' }}-linux
          path: ./tmp/
          retention-days: 1

  build-window-app:
    runs-on: windows-latest
    # @TODO: uncomment this
    # needs: build-web-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          cache: "npm"

      # get web-app artifacts
      - name: Get Web App Artifact
        id: get-web-app-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
              sort: 'created',
              order: 'desc',
            });
            return artifacts.data.artifacts[0].workflow_run.id;

      - name: Restore Web App artifact
        uses: actions/download-artifact@v4
        with:
          name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
          path: dist
          github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
          run-id: ${{ steps.get-web-app-artifact.outputs.result }}

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # install @tauri-apps/cli@latest
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build App
        run: tauri build -v

      # upload artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kasia-${{ github.ref_name == 'main' && 'production' || 'staging' }}-windows
          path: ./src-tauri/target/release/bundle/nsis/kasia_0.1.0_x64-setup.exe
          retention-days: 1

  # @TODO: waiting for Apple Developer Program membership to build iOS app
  # build-ios-app:
  #   runs-on: macos-14
  #   needs: build-web-app
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         cache: "npm"

  #     # install xcode (not xcode cli)
  #     - name: Install Xcode
  #       uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: latest-stable

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: 1.86.0
  #         targets: aarch64-apple-ios, aarch64-apple-ios-sim, x86_64-apple-ios

  #     # get web-app artifacts
  #     - name: Get Web App Artifact
  #       id: get-web-app-artifact
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const artifacts = await github.rest.actions.listArtifactsForRepo({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             per_page: 100,
  #             name: 'kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}',
  #             sort: 'created',
  #             order: 'desc',
  #           });
  #           return artifacts.data.artifacts[0].workflow_run.id;

  #     - name: Restore Web App artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kasia-build-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: dist
  #         github-token: ${{ secrets.GH_PAT_READ_ACTIONS }}
  #         run-id: ${{ steps.get-web-app-artifact.outputs.result }}

  #     # install @tauri-apps/cli@latest
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli@latest

  #     - name: Install Homebrew
  #       run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  #     - name: Install CocoaPods
  #       run: brew install cocoapods

  #     - name: Build App
  #       run: tauri ios build -v
  #       env:
  #         NDK_HOME: /usr/local/lib/android/sdk/ndk/29.0.13599879

  #     - name: Get Tauri App Version
  #       id: app-version
  #       run: |
  #         CARGO_TOML_PATH="src-tauri/Cargo.toml"
  #         echo "Attempting to read version from $CARGO_TOML_PATH"

  #         if [ ! -f "$CARGO_TOML_PATH" ]; then
  #           echo "Error: $CARGO_TOML_PATH not found."
  #           exit 1
  #         fi

  #         echo "--- Relevant content from $CARGO_TOML_PATH (looking for 'version = \"...' line) ---"
  #         grep '^version = "' "$CARGO_TOML_PATH" || echo "No line starting with 'version = \"' found in $CARGO_TOML_PATH."
  #         echo "--- End of relevant content ---"

  #         # Extract version string from Cargo.toml.
  #         # This looks for a line like 'version = "x.y.z"' in the [package] section.
  #         VERSION_STRING=$(grep '^version = "' "$CARGO_TOML_PATH" | head -n 1 | sed -e 's/version = "//' -e 's/"//')

  #         echo "Extracted version_string: '$VERSION_STRING'" # Debug output

  #         if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then # Check for empty or literal "null"
  #           echo "Error: Version not found or is invalid in $CARGO_TOML_PATH."
  #           echo "Please ensure $CARGO_TOML_PATH contains a line like 'version = \"x.y.z\"' (typically under the [package] section)."
  #           exit 1
  #         fi

  #         echo "Successfully extracted version: $VERSION_STRING"
  #         echo "version_string=$VERSION_STRING" >> "$GITHUB_OUTPUT"
  #       shell: bash

  #     - name: Rename iOS IPA file
  #       run: |
  #         mv ./src-tauri/gen/ios/app/build/Release-iphoneos/kasia.ipa ./src-tauri/gen/ios/app/build/Release-iphoneos/${{env.APP_NAME}}-${{ steps.app-version.outputs.version_string }}.ipa

  #     - name: Upload IPA Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kasia-ios-${{ github.ref_name == 'main' && 'production' || 'staging' }}
  #         path: ./src-tauri/gen/ios/app/build/Release-iphoneos/${{env.APP_NAME}}-${{ steps.app-version.outputs.version_string }}.ipa
