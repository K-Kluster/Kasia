# Kasia Messaging App - Cursor Rules

## Styling Guidelines (MANDATORY)

### ✅ ALWAYS DO:

- Use Tailwind CSS inline utility classes for ALL styling
- Use the `clsx` library for conditional styling
- Follow Tailwind's "golden path" - utility-first approach
- Use Tailwind's built-in spacing, colors, and design tokens
- Keep styling declarative and inline with components

### ❌ NEVER DO:

- Create new CSS files or CSS modules (.css, .module.css)
- Use inline style objects: `style={{...}}`
- Use custom CSS classes
- Use CSS-in-JS solutions
- Mix styling approaches

## Tailwind Patterns

### Basic Utility Classes

```tsx
// Flexbox layouts
className = "flex items-center justify-between";
className = "flex flex-col gap-4";

// Buttons
className =
  "px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500";

// Cards/Containers
className = "bg-white rounded-lg shadow-md p-6 border border-gray-200";

// Inputs
className =
  "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent";

// Error states
className = "text-red-500 bg-red-50 border border-red-200 p-3 rounded";
```

### Conditional Styling with clsx

```tsx
// Simple conditional
className={clsx(
  "base-classes-here",
  condition && "conditional-classes"
)}

// Object syntax for readability
className={clsx(
  "text-white font-bold outline-white",
  { "outline-red-50": hasError }
)}

// Multiple conditions
className={clsx(
  "px-4 py-2 rounded font-medium",
  {
    "bg-blue-500 text-white": variant === 'primary',
    "bg-gray-200 text-gray-800": variant === 'secondary',
    "opacity-50 cursor-not-allowed": disabled
  }
)}
```

## Code Conversion Examples

### ❌ Wrong (Don't do this):

```tsx
// Inline styles
<div style={{ display: 'flex', alignItems: 'center', marginTop: '10px' }}>

// CSS modules
<div className={styles['modal-overlay']}>

// String concatenation
<div className={`contact-item ${isSelected ? "active" : ""}`}>

// Mixed approaches
<div className="error" style={{ display: 'flex' }}>
```

### ✅ Correct (Do this):

```tsx
// Pure Tailwind utilities
<div className="flex items-center mt-2.5">

// Tailwind with consistent naming
<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">

// clsx for conditional styling
<div className={clsx(
  "p-4 rounded-lg border cursor-pointer transition-colors",
  isSelected ? "bg-blue-100 border-blue-500" : "bg-white border-gray-200"
)}>

// Complex conditional styling
<div className={clsx(
  "flex items-center justify-between p-3 rounded-md",
  {
    "text-red-500 bg-red-50 border border-red-200": hasError,
    "text-gray-900 bg-white border border-gray-300": !hasError
  }
)}>
```

## Responsive Design

- Use Tailwind responsive prefixes: `sm:`, `md:`, `lg:`, `xl:`
- Mobile-first approach: base classes for mobile, prefixes for larger screens

```tsx
className = "text-sm md:text-base lg:text-lg";
className = "flex flex-col md:flex-row gap-4";
```

## Component-Specific Patterns

### Modal/Overlay

```tsx
className =
  "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
className = "bg-white rounded-lg p-6 max-w-md mx-4 relative";
```

### Form Elements

```tsx
// Labels
className = "block text-sm font-medium text-gray-700 mb-2";

// Input fields
className =
  "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500";

// Error messages
className = "mt-1 text-sm text-red-600";
```

### Messages/Chat UI

```tsx
// Message containers
className={clsx(
  "max-w-xs lg:max-w-md px-4 py-2 rounded-lg mb-2",
  isOutgoing
    ? "bg-blue-500 text-white ml-auto"
    : "bg-gray-200 text-gray-900 mr-auto"
)}
```

## Migration Strategy

When editing existing files:

1. Replace ALL `style={{...}}` with equivalent Tailwind classes
2. Convert CSS class names to Tailwind utilities
3. Use `clsx` for any conditional logic
4. Remove imports of CSS modules
5. Update string concatenation to use `clsx`

## Dependencies

- `clsx` is approved for conditional styling
- No other styling dependencies should be added
- Prefer utility classes over custom solutions

## When Suggesting Code

- Always provide complete Tailwind class combinations
- Show clsx usage for any dynamic styling
- Include hover states, focus states, and transitions where appropriate
- Consider accessibility (focus rings, proper contrast)
- Use semantic color names (gray-900, blue-500) not arbitrary values
